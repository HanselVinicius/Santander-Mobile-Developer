fun main(){
    //mutable 
     println("-----------list---------------")

    val Pedro = Funcionario("Pedro", 2500.00,"clt")
    val Felipe = Funcionario("Felipe", 2000.00,"pj")
    val bruno =  Funcionario("Bruno", 3000.00,"clt")
    
    
    
    val funcionarios = mutableListOf(Pedro, Felipe)
    funcionarios.forEach{println (it)}
    println("----------------")
    funcionarios.add(bruno)    
    funcionarios.forEach{println (it)}
	println("----------------")
    funcionarios.remove(Felipe)    
    funcionarios.forEach{println (it)}
    
    
    
    println("-----------set---------------")
    val trabalhadores = mutableSetOf(Pedro)
    trabalhadores.forEach{println(it)}
    println("---------------------------")
    trabalhadores.add(Felipe)
    trabalhadores.add(bruno)
    trabalhadores.forEach{println(it)}
    println("---------------------------")
    trabalhadores.remove(Pedro)
    trabalhadores.forEach{println(it)}
    
    
    
    
    //mutable map
    println("---------------------------------------")
    val repositorio = repositorio<Funcionario>()
    repositorio.create(Pedro.nome,Pedro)
    repositorio.create(bruno.nome,bruno)
    repositorio.create(Felipe.nome,Felipe)
    
    println(repositorio.findById(Felipe.nome))
    println("----------------------")
    
    repositorio.findAll().forEach{println(it)}

     

}











data class Funcionario(
	val nome:String,
	val salario:Double,
    val tipo: String

){
    override fun toString(): String = 
    """
    	nome:$nome
        salario:$salario
        tipo:$tipo

	""".trimIndent()
}









class repositorio <T>{
    private val map = mutableMapOf<String, T>()
    
    fun create(id: String, value: T){
        map[id] = value 
    }
    
    fun findById(id:String) = map[id]
    
    
    fun findAll() = map.values
    
    
    fun remove(id:String ) = map.remove(Id)
}
